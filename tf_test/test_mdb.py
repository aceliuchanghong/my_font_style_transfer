import os
import lmdb
import pickle

from utils.util import coords_render

script = {"CHINESE": ['CASIA_CHINESE', 'Chinese_content.pkl'],
          'JAPANESE': ['TUATHANDS_JAPANESE', 'Japanese_content.pkl'],
          "ENGLISH": ['CASIA_ENGLISH', 'English_content.pkl']
          }

root = '../data'
dataset = 'CHINESE'
num_img = 15
index = 3
max_len = 150
if __name__ == '__main__':
    data_path = os.path.join(root, script[dataset][0])
    lmdb_path = os.path.join(data_path, 'train')
    # lmdb_path = r'D:\aProject\py\SDT\utils\suit_pics3'
    print(lmdb_path)
    """
    max_readers=8: 允许最多8个读取器并发访问数据库。
    readonly=True: 以只读方式打开数据库。
    lock=False: 不使用文件锁，这样可以在多个进程中只读访问数据库。
    readahead=False: 关闭预读取功能，以降低对内存的占用。
    meminit=False: 不预先初始化内存。
    LMDB 数据库是由一个环境(environment)和多个事务(transactions)组成的，环境包括数据文件和锁文件。
    从 data.mdb 文件中读取数据，而 lock.mdb 文件是用来进行事务处理的文件锁。当设置 lock=False 时，锁文件不会被使用
    """
    lmdb = lmdb.open(lmdb_path, max_readers=8, readonly=True, lock=False, readahead=False, meminit=False)
    print(lmdb.begin(write=False).get('num_sample'.encode('utf-8')).decode())
    with lmdb.begin(write=False) as txn:
        num_sample = int(txn.get('num_sample'.encode('utf-8')).decode())
        for i in range(index):
            data = pickle.loads(txn.get(str(i).encode('utf-8')))
            # print(data)
            tag_char, coords, fname = data['tag_char'], data['coordinates'], data['fname']
            print(str(i) + "个:\ntag_char: {}\ncoords_shape: {}\nfname: {}".format(tag_char, coords.shape, fname))
            print("coords:\n", coords)

            coords2 = [
                [0, 0, 1, 0, 0],
                [0.4245383, 0.7072103, 1, 0, 0],
                [-0.00600382, 0.21708062, 1, 0, 0],
                [-0.1673134, 0.203743, 1, 0, 0],
                [-0.3671279, 0.1860789, 0, 1, 0],
                [-1.2915776, -0.08335708, 1, 0, 0],
                [1.670853, 0.04736948, 1, 0, 0],
                [0.8263477, -0.14715113, 1, 0, 0],
                [0.37288806, -0.19251104, 1, 0, 0],
                [0.03587571, -0.13480563, 0, 1, 0],
                [-1.0939199, 0.3183934, 1, 0, 0],
                [-1.2296093, 1.3632616, 1, 0, 0],
                [-0.78698343, 0.49401876, 1, 0, 0],
                [1.3694959, -0.32032216, 1, 0, 0],
                [0.7348668, -0.38287556, 1, 0, 0],
                [-1.5319475, 1.4259155, 1, 0, 0],
                [-1.0354438, 0.5942059, 1, 0, 0],
                [1.5588571, -0.40930176, 1, 0, 0],
                [0.83036125, -0.4640597, 1, 0, 0],
                [0.44748217, -0.46744567, 1, 0, 0],
                [0.06979039, 0.86320424, 1, 0, 0],
                [-0.08312846, 0.2649214, 1, 0, 0],
                [-0.2034034, 0.1956079, 1, 0, 0],
                [-0.5115756, 0.06880079, 0, 1, 0],
                [-1.7585092, 0.15797156, 1, 0, 0],
                [-0.25178134, 2.0434723, 1, 0, 0],
                [-0.3301888, 0.941309, 1, 0, 0],
                [-0.13437171, 0.09567574, 1, 0, 0],
                [-0.17822444, -0.17096116, 0, 1, 0],
                [0.802729, -2.6004295, 1, 0, 0],
                [1.8211725, -0.22140723, 1, 0, 0],
                [1.2499875, -0.43359905, 1, 0, 0],
                [-0.17641965, 1.8087566, 1, 0, 0],
                [-0.3370649, 0.8381251, 1, 0, 0],
                [-0.21113257, 0.18173116, 1, 0, 0],
                [-0.33744085, 0.0063047, 1, 0, 0],
                [-0.49692646, -0.2145941, 0, 1, 0],
                [-0.74451184, -1.0675366, 1, 0, 0],
                [1.1499553, -0.04755975, 1, 0, 0],
                [0.44728994, -0.20969345, 1, 0, 0],
                [0.17572096, -0.24275592, 1, 0, 0],
                [-0.07617357, -0.24162343, 0, 1, 0],
                [-0.5179252, -0.1235823, 1, 0, 0],
                [-0.51146567, 1.4291997, 1, 0, 0],
                [-0.30118427, 0.4548164, 1, 0, 0],
                [-0.3248909, 0.25619733, 1, 0, 0],
                [-0.22565271, -0.00895073, 1, 0, 0],
                [-0.05455102, -0.1380337, 1, 0, 0],
                [0.13563016, -0.11504108, 1, 0, 0],
                [1.4711076, -0.08088198, 1, 0, 0],
                [0.6922666, -0.22461316, 1, 0, 0],
                [0.53284997, -0.37825805, 0, 1, 0],
                [-1.650439, -2.9948921, 0, 0, 1],
                [-0.33700186, 1.1728263, 0, 0, 1],
                [-1.4283836, -0.63114685, 0, 0, 1],
                [-0.78665555, -0.5870102, 0, 0, 1],
                [-1.0263871, -0.6211465, 0, 0, 1],
                [-0.90229917, -0.5275894, 0, 0, 1],
                [-0.9318876, -0.50886184, 0, 0, 1],
                [-0.8984239, -0.48922843, 0, 0, 1],
                [-0.8930204, -0.47741276, 0, 0, 1],
                [-0.8735119, -0.47150177, 0, 0, 1],
                [-0.8546257, -0.49006444, 0, 0, 1],
                [-0.8387506, -0.50431496, 0, 0, 1],
                [-0.82844067, -0.51150185, 0, 0, 1],
                [-0.82353973, -0.51137835, 0, 0, 1],
                [-0.819592, -0.50801474, 0, 0, 1],
                [-0.81451607, -0.5002592, 0, 0, 1],
                [-0.80588233, -0.49876863, 0, 0, 1],
                [-0.7954172, -0.49988037, 0, 0, 1],
                [-0.78728247, -0.49889213, 0, 0, 1],
                [-0.78122675, -0.49742514, 0, 0, 1],
                [-0.77606, -0.4957021, 0, 0, 1],
                [-0.7692704, -0.49566334, 0, 0, 1],
                [-0.75997865, -0.49920303, 0, 0, 1],
                [-0.75020635, -0.5044201, 0, 0, 1],
                [-0.7428646, -0.5051604, 0, 0, 1],
                [-0.73903644, -0.49717563, 0, 0, 1],
                [-0.7376652, -0.48488957, 0, 0, 1],
                [-0.73593104, -0.4736727, 0, 0, 1],
                [-0.7339802, -0.46519297, 0, 0, 1],
                [-0.7316452, -0.4618476, 0, 0, 1],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
            ]
            sk_pil = coords_render(coords2, split=True, width=256, height=256, thickness=8, board=0)
            save_path = '0.png'
            sk_pil.save(save_path)
